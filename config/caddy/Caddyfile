#
# this mapping rules are converted into Caddyfile from traefik rules of https://github.com/ikuradon/atproto-starter-kit/blob/main/compose.yaml
# cf. https://caddyserver.com/docs/caddyfile
#
# global options: starts >>>>
{
	#	debug
	on_demand_tls {
		ask http://caddy-sidecar:80
	}
	#    limits to HTTP/1.1 >>>
	servers {
		protocols h1
	}
	#    limits to HTTP/1.1 <<<
}

# https://caddy.community/t/how-can-i-allow-multiple-domain-origins-in-cors/22129/5
(cors) {
	@cors_preflight {
		method OPTIONS
	}
	@corsOrigin {
		header_regexp Origin ^https?://*.({$DOMAIN})$
	}

	handle @cors_preflight {
		header {
			Access-Control-Allow-Origin "*"
			Access-Control-Allow-Methods "GET, POST, PUT, PATCH, DELETE"
			Access-Control-Allow-Headers *
			Vary Origin
			defer
		}
		respond "" 204
	}

	handle @corsOrigin {
		header {
			Access-Control-Allow-Origin "*"
			Access-Control-Expose-Headers *
			Vary Origin
			defer
		}
	}
}

# global options: ends   <<<<

# self-hosting CA with ACME,  for self signed certicates >>>>
#   accessible as https://ca.DOMAIN:9000/acme/local/directory
#   cf. https://blog.kurokobo.com/archives/3669#Caddy_acme_server
#
ca.{$DOMAIN}:9000 {
	tls internal
	acme_server
}
# self-hosting CA with ACME,  for self signed certicates <<<<

# starts; reverse proxying rules >>>>>
#
#  FQDN_FOR_OUTER {
#	tls internal(for self-signed) | your@email.address(for public-signed) {
#         on_demand
#       }
#       reverse_proxy http://container:port
# }

# starts: to check if sidecar working, this record maybe need just for debugging. >>>>
#caddy-sidecar.{$DOMAIN} {
#       import cors
#	tls {$EMAIL4CERTS} {
#	  on_demand
#       }
#	reverse_proxy http://caddy-sidecar:80
#}
# ends: to check if sidecar working, this record maybe need just for debugging. <<<<

# starts: to check if caddy works as reverse proxy, for HTTP(S) and WS(S) >>>>>>>>>>
#  for HTTPS/WSS => HTTP/WS, you can test websocket by ```wscat -c wss://test-wss.mybluesky.local.com/ws```
test-wss.{$DOMAIN} {
	import cors
	tls {$EMAIL4CERTS} {
		on_demand
	}

	@ws {
		header Connection *Upgrade*
		header Upgrade websocket
	}

	reverse_proxy @ws http://test-wss:8080
	reverse_proxy http://test-wss:8080
}

#  for HTTP/WS => HTTP/WS, you can test websocket by ```wscat -c ws://test-ws.mybluesky.local.com/ws```
http://test-ws.{$DOMAIN} {
	import cors
	tls {$EMAIL4CERTS} {
		on_demand
	}
	@ws {
		header Connection *Upgrade*
		header Upgrade websocket
	}

	reverse_proxy @ws http://test-ws:8080
	reverse_proxy http://test-ws:8080
}

# ends: to check if caddy works as reverse proxy, for HTTP(S) and WS(S) <<<<<<<<<<

# starts: simple mapping >>>>>

{$feedgenFQDN} {
	import cors
	tls {$EMAIL4CERTS} {
		on_demand
	}
	reverse_proxy http://feed-generator:3000
}
# ends:  simple mapping <<<<<
